SubDir HAIKU_TOP src servers app ;

UseLibraryHeaders agg ;
UsePrivateHeaders app graphics input interface kernel shared storage support ;

UseHeaders [ FDirName $(HAIKU_TOP) src servers app drawing ] ;
UseHeaders [ FDirName $(HAIKU_TOP) src servers app drawing Painter ] ;
UseHeaders [ FDirName $(HAIKU_TOP) src servers app drawing interface local ] ;
UseHeaders [ FDirName $(HAIKU_TOP) src servers app drawing interface remote ] ;
UseHeaders [ FDirName $(HAIKU_TOP) src servers app drawing interface html5 ] ;
UseHeaders [ FDirName $(HAIKU_TOP) src servers app stackandtile ] ;

UseHeaders [ FDirName $(HAIKU_TOP) src servers app decorator ] ;
local decorator_src =
	DecorManager.cpp
	Decorator.cpp
	DefaultDecorator.cpp
	DefaultWindowBehaviour.cpp
	MagneticBorder.cpp
	TabDecorator.cpp
	WindowBehaviour.cpp
	;

UseHeaders [ FDirName $(HAIKU_TOP) src servers app font ] ;
local font_src =
	FontCache.cpp
	FontCacheEntry.cpp
	FontEngine.cpp
	FontFamily.cpp
	FontManager.cpp
	FontStyle.cpp
	;

UseBuildFeatureHeaders freetype ;
Includes [ FGristFiles AppServer.cpp BitmapManager.cpp
	ClientMemoryAllocator.cpp Desktop.cpp DesktopSettings.cpp
	DrawState.cpp DrawingContext.cpp DrawingEngine.cpp ServerApp.cpp 
	ServerBitmap.cpp ServerCursor.cpp ServerFont.cpp ServerPicture.cpp 
	ServerWindow.cpp View.cpp Window.cpp WorkspacesView.cpp
	$(decorator_src) $(font_src) ]
	: [ BuildFeatureAttribute freetype : headers ] ;


local BROKEN_64 = ;
if $(TARGET_ARCH) != x86_64 {
    BROKEN_64 = "" ;
}

local main_src =
	Angle.cpp
	AppServer.cpp
	#BitfieldRegion.cpp
	BitmapManager.cpp
	ClientMemoryAllocator.cpp
	CursorData.cpp
	CursorManager.cpp
	CursorSet.cpp
	Desktop.cpp
	DesktopListener.cpp
	DesktopSettings.cpp
	DirectWindowInfo.cpp
	DrawingContext.cpp
	DrawState.cpp
	EventDispatcher.cpp
	EventStream.cpp
	HashTable.cpp
	InputManager.cpp
	IntPoint.cpp
	IntRect.cpp
	MessageLooper.cpp
	MultiLocker.cpp
	OffscreenServerWindow.cpp
	OffscreenWindow.cpp
	ProfileMessageSupport.cpp
	RGBColor.cpp
	RegionPool.cpp
	Screen.cpp
	ScreenConfigurations.cpp
	ScreenManager.cpp
	ServerApp.cpp
	ServerBitmap.cpp
	ServerCursor.cpp
	ServerFont.cpp
	ServerPicture.cpp
	ServerWindow.cpp
	SystemPalette.cpp
	View.cpp
	VirtualScreen.cpp
	Window.cpp
	WindowList.cpp
	Workspace.cpp
	WorkspacesView.cpp
	;

Server app_server :
	$(main_src)
	$(decorator_src)
	$(font_src)

	# libraries
	:
	libtranslation.so libbe.so libbnetapi.so
	libaslocal.a $(BROKEN_64)libasremote.a $(BROKEN_64)libashtml5.a 
	libasdrawing.a libpainter.a libagg.a
	[ BuildFeatureAttribute freetype : library ]
	libstackandtile.a liblinprog.a libtextencoding.so libshared.a
	[ TargetLibstdc++ ]

	: app_server.rdef
;

#SEARCH on [ FGristFiles $(decorator_src) ] = [ FDirName $(HAIKU_TOP) src servers app decorator ] ;
#SEARCH on [ FGristFiles $(font_src) ] = [ FDirName $(HAIKU_TOP) src servers app font ] ;

SEARCH_SOURCE += [ FDirName $(SUBDIR) decorator ] ;
SEARCH_SOURCE += [ FDirName $(SUBDIR) font ] ;

HOST_HDRS += /usr/local/include/freetype2 ; # XXX brew installation of freetype2 on OSX
USES_BE_API on <build>app_server = true ;
BuildPlatformMain <build>app_server :
	$(main_src)
	$(decorator_src)
	$(font_src)
	:
	$(HOST_LIBBE)
	libaslocal_build.a $(BROKEN_64)libasremote_build.a $(BROKEN_64)libashtml5_build.a
	libasdrawing_build.a  libpainter_build.a libagg_build.a
	freetype
	libstackandtile_build.a liblinprog_build.a libshared_build.a
	$(HOST_LIBSTDC++) $(HOST_LIBSUPC++)
;

SubInclude HAIKU_TOP src servers app drawing ;
SubInclude HAIKU_TOP src servers app stackandtile ;
